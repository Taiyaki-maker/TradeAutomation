# -*- coding: utf-8 -*-
import requests
from datetime import datetime
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import sympy
import math

'''
# 使用する時間足
chart_sec = 300

# CryptowatchでBTCFXの価格データを取得
def get_price(min, before=0, after=0):
	price = []
	params = {"periods" : min }
	if before != 0:
		params["before"] = before
	if after != 0:
		params["after"] = after
	response = requests.get("https://api.cryptowat.ch/markets/bitflyer/ethjpy/ohlc",params)
	data = response.json()
	
	if data["result"][str(min)] is not None:
		for i in data["result"][str(min)]:
			price.append({ "close_time" : i[0],
				"close_time_dt" : datetime.fromtimestamp(i[0]).strftime('%Y/%m/%d %H:%M'),
				"open_price" : i[1],
				"high_price" : i[2],
				"low_price" : i[3],
				"close_price": i[4] })
	return price

# 価格チャートを取得
price = get_price(chart_sec)

'''

def predict(y,x):
    y2 = []
    for i in x:
        y2.append(y[i])
    df_x = pd.DataFrame(x)
    df_y = pd.DataFrame(y2)
    mod = LinearRegression()
    lr = mod.fit(df_x, df_y)
    return lr.coef_[0][0],lr.intercept_[0]

def choice(short,long):
    ε = 1000
    data = np.arange(600, 1000, 1)
    a1,b1 = predict(short,data)
    a2,b2 = predict(long,data)
    x = sympy.Symbol('x')
    y = sympy.Symbol('y')
    ex1 = -y + a1*x + b1
    ex2 = -y + a2*x + b2
    dict = sympy.solve([ex1,ex2])
    if dict[x] - 999 < ε and dict[x] >= 1000:
        if short[-1] > long[-1]:
            return -1
        else:
            return 1
    return 0

#パラメータを利益に応じて変更
#最後の足だけの比較で良いか考える→クロスが予想しきれずにいきなり1000以内に出現した場合を考える
#機械学習モデルを使った予想もあり変える

#Y = [i['close_price'] for i in df]
Y = [157552, 157694, 157781, 157690, 157685, 157700, 157700, 157700, 157700, 157699, 157546, 157880, 157953, 157839, 157846, 157795, 157791, 157787, 157838, 157838, 157753, 157777, 157790, 157750, 157831, 157938, 157947, 157914, 157903, 157720, 157807, 157749, 157729, 157736, 157530, 157531, 157598, 157628, 157590, 157687, 157680, 157725, 157680, 157750, 157750, 157752, 157680, 157743, 157697, 157742, 157744, 157719, 157597, 157578, 157570, 157438, 157487, 157360, 157380, 157504, 157452, 157467, 157270, 157363, 157337, 157416, 157407, 157342, 157394, 157399, 157303, 157332, 157300, 157255, 157157, 157208, 157000, 157120, 157090, 157060, 157062, 157166, 156864, 156820, 156717, 156597, 156913, 156881, 156900, 156971, 156826, 156826, 156865, 156902, 156921, 156920, 156960, 156854, 156922, 156920, 156961, 156895, 157066, 156994, 157079, 157045, 157040, 157048, 157055, 157082, 157082, 157218, 157195, 157215, 157794, 157589, 157643, 157481, 157439, 157443, 157447, 157410, 157553, 157483, 157564, 157589, 157557, 157585, 157704, 157577, 157487, 157481, 157499, 157548, 157480, 157565, 157517, 157550, 157633, 157556, 157604, 157604, 157621, 157561, 157605, 157540, 157540, 157386, 157392, 157374, 157410, 157420, 157437, 157504, 158270, 159181, 158894, 158902, 158950, 159229, 159211, 159121, 159050, 158943, 159046, 159055, 159120, 159038, 159200, 159219, 159350, 159350, 159390, 159372, 159262, 159350, 159290, 159517, 159484, 159593, 159520, 159574, 159671, 159619, 159699, 159632, 159484, 159484, 159548, 159817, 159833, 159615, 159551, 159465, 159495, 159491, 159402, 159480, 159526, 159428, 159431, 159431, 159525, 159354, 159384, 159300, 159126, 159144, 159296, 159251, 159254, 159337, 159288, 159406, 159351, 159404, 159377, 159352, 159478, 159400, 159466, 159400, 159422, 159335, 159333, 159110, 159111, 159123, 159144, 159156, 159000, 158968, 158903, 158933, 158881, 158881, 159116, 159042, 159029, 159089, 159086, 158984, 159068, 159027, 159004, 159004, 158987, 159150, 159208, 159149, 159182, 159320, 159397, 159473, 159405, 159461, 159456, 159501, 159523, 159437, 159531, 159447, 159551, 159454, 159368, 159374, 159393, 159406, 159393, 159385, 159260, 159260, 159311, 159299, 159242, 159234, 159262, 159278, 159210, 159127, 159259, 159260, 159316, 159230, 159227, 159226, 159320, 159226, 159344, 159339, 159257, 159318, 159378, 159341, 159330, 159260, 159292, 159310, 159322, 159365, 159290, 159314, 159319, 159415, 159416, 159189, 159151, 159246, 159163, 159193, 159342, 159251, 159266, 159272, 159343, 159265, 159229, 159403, 159340, 159340, 159403, 159361, 159395, 159310, 159310, 159219, 159371, 159487, 159326, 159367, 159287, 159335, 159271, 159206, 159281, 159310, 158810, 158992, 159078, 159034, 158916, 159106, 159214, 159212, 159295, 159122, 159100, 159162, 158901, 158946, 158821, 158905, 159090, 159090, 159110, 159112, 158928, 159094, 159056, 159159, 159197, 159011, 159079, 158990, 158900, 158542, 158166, 157901, 157750, 158114, 158032, 158236, 158164, 157984, 158109, 158154, 158192, 158262, 158096, 158137, 158060, 158016, 158007, 158070, 157872, 157889, 157945, 157800, 157800, 157799, 157790, 157810, 157850, 157842, 157797, 157750, 157771, 157851, 157825, 157870, 157782, 157678, 157678, 157610, 157584, 157595, 157517, 157540, 157381, 157374, 157327, 157409, 157350, 157553, 157770, 157783, 157757, 157918, 158000, 157999, 158056, 158123, 158100, 158146, 158130, 158040, 158011, 158009, 158205, 158358, 158262, 158090, 158252, 158225, 158053, 158080, 158111, 158150, 158133, 158136, 158149, 158060, 158094, 158067, 158220, 158447, 158377, 158483, 158611, 158478, 158727, 158790, 158805, 158992, 158852, 158689, 158866, 158800, 158953, 158999, 158919, 158741, 158569, 158756, 158573, 158722, 158756, 158764, 158871, 158893, 158846, 158808, 158750, 158714, 158774, 158876, 158762, 158788, 158723, 158783, 158827, 158837, 158934, 158792, 158770, 158862, 158894, 158850, 158850, 158962, 159053, 158792, 158827, 158776, 158846, 159214, 159173, 159195, 159237, 159245, 159192, 159222, 159169, 159177, 159118, 159055, 159089, 159137, 159092, 159048, 159026, 159123, 158949, 158916, 158999, 159028, 159020, 159013, 158981, 159095, 159033, 159132, 159066, 159032, 159032, 158985, 158683, 158625, 158305, 157973, 157620, 157792, 158044, 158019, 157918, 157972, 158150, 158050, 158096, 158257, 158243, 158159, 158340, 158317, 158515, 158273, 158243, 158280, 158181, 158250, 158352, 158537, 158309, 158314, 158156, 158151, 158166, 158226, 158112, 158148, 158186, 158171, 158194, 158096, 158003, 158020, 158112, 158112, 157926, 157984, 157986, 157911, 157954, 157943, 157958, 157910, 157750, 157790, 157836, 157709, 157917, 157905, 157837, 157801, 157801, 157975, 158250, 158125, 158235, 158189, 158222, 158371, 158474, 158440, 158452, 158547, 158609, 158600, 158517, 158554, 158481, 158625, 158574, 158634, 158617, 158700, 158650, 158683, 158617, 158725, 158794, 158701, 158625, 158711, 158729, 158718, 158735, 158585, 158667, 158550, 158570, 158610, 158650, 158715, 158800, 158832, 159195, 159256, 159400, 159410, 159517, 159421, 159400, 159430, 159350, 159400, 159430, 159385, 158965, 159062, 159088, 159117, 159127, 159236, 158993, 159054, 158900, 158974, 158933, 159053, 159500, 159876, 160389, 160533, 160533, 160500, 160355, 160237, 160152, 159912, 159946, 160050, 160568, 160435, 160486, 160502, 160500, 160537, 160882, 161009, 161047, 161120, 161175, 161356, 163390, 163303, 163000, 162945, 163000, 163162, 162825, 162765, 162873, 163234, 163420, 163681, 163365, 163242, 163477, 163523, 163618, 163688, 163778, 163694, 163800, 163680, 163481, 163513, 163261, 163271, 163390, 163400, 163388, 163364, 163438, 163274, 163214, 163300, 163361, 163165, 163154, 163100, 163199, 163276, 163322, 163315, 163325, 163371, 163348, 163379, 163490, 163195, 163163, 163299, 163100, 163075, 163172, 162967, 163050, 163095, 163208, 163068, 163223, 163205, 163168, 163021, 163223, 162974, 162711, 162507, 162837, 162953, 162975, 163092, 163238, 163383, 163321, 163235, 163158, 163153, 163215, 163148, 163189, 163189, 163210, 163061, 163018, 163086, 163083, 163157, 163063, 163232, 163157, 163209, 163173, 163141, 163113, 163047, 163124, 163134, 163069, 162938, 163057, 162969, 162969, 163128, 163193, 163390, 163322, 163565, 163500, 163592, 163744, 163883, 163799, 163973, 164100, 164230, 164042, 163968, 163892, 163791, 163792, 163800, 163809, 163768, 163849, 163900, 163820, 163797, 163847, 163829, 163954, 163958, 163914, 164081, 163985, 163742, 163631, 163734, 163908, 163913, 164206, 163993, 163959, 163880, 163898, 164065, 163880, 164333, 164700, 164793, 164729, 164874, 165126, 165066, 165373, 165720, 165874, 165584, 165475, 165750, 165820, 165546, 165722, 165724, 165535, 165399, 165469, 165540, 165524, 165570, 165560, 165538, 165731, 166100, 166174, 167419, 167313, 167345, 167237, 167229, 167076, 166986, 167151, 167148, 167416, 167466, 167445, 167490, 167689, 167516, 167777, 167548, 167273, 166656, 166937, 166617, 166186, 166200, 166190, 166384, 166403, 166171, 166333, 166300, 166178, 166155, 166164, 165919, 166056, 165944, 165843, 165751, 165714, 165796, 166014, 166182, 166116, 166124, 166099, 166094, 166191, 166302, 166067, 166067, 166107, 166034, 166111, 166233, 166002, 166183, 165963, 166175, 166208, 166194, 166353, 166375, 166250, 166141, 165936, 166016, 166169, 166299, 166276, 166168, 166208, 166239, 166130, 166076, 165980, 166053, 166166, 166204, 166075, 166035, 166122, 165960, 165665, 165714, 165694, 165692, 165495, 165503, 165317, 165552, 165085, 165112, 165255, 165472, 165472, 165716, 165562, 165718, 165649, 165642, 165608, 165567, 165559, 165647, 165689, 165665, 165626, 165527, 165533, 165589, 165657, 165570, 165538, 165572, 165441, 165555, 165590, 165677, 165637, 165556, 165674, 165599, 165568, 165607, 165755, 165838, 165752, 165818, 165783, 165817, 165862, 165919, 165787, 165931, 166025, 166027, 165911, 165978, 166042, 166068, 166137, 166144, 166300, 166277, 166101, 166204, 166000, 166091, 166147, 165969, 165972, 165754, 165892, 165866]
df = pd.DataFrame(Y)

#指数移動平均線を描画
short = df[0].ewm(span=48, adjust=False).mean()
long = df[0].ewm(span=288, adjust=False).mean()

print(choice(short,long))

'''
plt.plot(x, short, 'r-')
plt.plot(x, long, 'b-')
for i in choice(short,long):
    plt.plot(i, short[i[0]:i[-1] + 1], "p")
plt.show()'''